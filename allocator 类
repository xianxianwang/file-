#include<memory>

allocator类将内存分配和对象构造分离开来。它分配的内存是原始的，未分配的

allocator<T> a:定义了一个名为a的allocator对象，它可以为类型为T的对象分配内存。 
allocator<string> alloc; 

a.allocate(n):分配了一段原始的、未构造的内存，保存n个类型为T的对象
auto const p=alloc.allocate(n);//分配n个未初始化的string

a.construct(p,args)：p必须是一个类型为T*的指针，指向一块原始内存；arg被传递给类型为T的构造函数，用来在p指向的内存中构造一个对象
auto q=p;//q指向最后构造的元素之后的位置
alloc.allocate(q++);
alloc.allocate(q++,10,'c');
alloc.allocate(q++,"hi");
还未构造的情况下，使用原始内存是错误的

a.destory(p):p为T*类型的指针，此算法对p指向的对象执行析构函数
while(q!=p)
   alloc.destroy(--q);

a.deallocate(p,n)：释放从T*指针p中地址开始的内存，这块内存保存了n个类型为T的对象；
p必须是一个先前由allocate返回的指针，且n必须是p创建时所要求的大小。
在调用deallocator之前，用户必须对每个在这块内存中创建的对象调用destroy
alloc.deallocate(p,n);
