#include<memory>

allocator类将内存分配和对象构造分离开来。它分配的内存是原始的，未分配的

allocator<T> a:定义了一个名为a的allocator对象，它可以为类型为T的对象分配内存。 
allocator<string> alloc; 

a.allocate(n):分配了一段原始的、未构造的内存，保存n个类型为T的对象
auto const p=alloc.allocate(n);//分配n个未初始化的string 

a.construct(p,args)：p必须是一个类型为T*的指针，指向一块原始内存；arg被传递给类型为T的构造函数，用来在p指向的内存中构造一个对象
auto q=p;//q指向最后构造的元素之后的位置
alloc.construct(q++);
alloc.construct(q++,10,'c');
alloc.construct(q++,"hi");
还未构造的情况下，使用原始内存是错误的

a.destory(p):p为T*类型的指针，此算法对p指向的对象执行析构函数
while(q!=p)
   alloc.destroy(--q);

a.deallocate(p,n)：释放从T*指针p中地址开始的内存，这块内存保存了n个类型为T的对象；
p必须是一个先前由allocate返回的指针，且n必须是p创建时所要求的大小。
在调用deallocator之前，用户必须对每个在这块内存中创建的对象调用destroy
alloc.deallocate(p,n);

uninitialized_copy(b,e,b2):从迭代器b和e指出的输入范围中拷贝元素到迭代器b2指定的未构造的原始内存中。
b2指向的内存必须足够大，能容纳输入序列中元素的拷贝
调用返回一个指针，指向最后一个构造的元素之后的位置。
uninitialized_copy_n(b,n,b2):从迭代器b指向的元素开始，拷贝n个元素到b2开始的内存中
uninitialized_fill(b,e,t):在迭代器b和e指定的原始内存范围中创建对象，对象的值均为t的拷贝
uninitialized_fill_n(b,n,t):从迭代器b指向的内存地址开始创建n个对象。b必须指向足够大的未构造的原始内存，能够容纳给定数量的对象
auto p=alloc.allocate(v1.size()*2);
auto q=uninitialized_copy(v1,begin(),v1.end(),p);
uninitialized_fill_n(q,v1,size(),42);
