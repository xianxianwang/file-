
class Strvec
{
public:
	Strvec() :elements(nullptr), first_free(nullptr), cap(nullptr) {}
	Strvec(initializer_list<string>);
	Strvec(const Strvec&);
	Strvec& operator=(const Strvec&);
	~Strvec();
	void push_back(const string&);//拷贝元素
	size_t size() const { return first_free - elements; }
	size_t capacity() const { return cap - elements; }
	string *begin() const{ return elements; }
	string *end() const{ return first_free; }
private:
	static allocator<string>alloc;
	void free();//摧毁元素并释放内存
	void free1();
 	void reallocate();//获得更多的内存并拷贝已有元素
	void resize(size_t);
	void reserve(size_t);
	pair<string*, string*> alloc_n_copy(const string*, const string*);
	void chk_n_alloc()//保证Strvec至少有容纳一个新元素的空间
	{
		if (size() == capacity())
			reallocate();
	}
	string *elements;//指向分配的内存中的首元素
	string *first_free;//指向最后一个实际元素之后的位置
	string *cap;//指向分配的内存末尾之后的位置
};

void Strvec::push_back(const string&s)
{
	chk_n_alloc();
	alloc.construct(first_free++,s);
}

pair<string*, string*> Strvec::alloc_n_copy(const string*b, const string*e)
{
	auto data = alloc.allocate(e - b);
	auto edata = uninitialized_copy(b, e, data);
	return make_pair(data ,edata);
}
void Strvec::free()
{
	if (elements)
	{
		for (auto p = first_free; p != elements;)
		{
			alloc.destroy(--p);
		}
		alloc.deallocate(elements, cap-elements );
	}
}
void Strvec::free1()
{
	if (elements)
	{
		for_each(elements, first_free, [](auto p = first_free) {--p; alloc.destroy(p); });
		alloc.deallocate(elements, cap-elements);
	}
}
Strvec::Strvec(const Strvec& s)
{
	auto newdata = alloc_n_copy( s.begin() , s.end() );
	elements = newdata.first;
	first_free = cap = newdata.second;
}
Strvec::~Strvec()
{
	free();
}
Strvec& Strvec::operator=(const Strvec& s)
{
	auto data = alloc_n_copy(s.begin(), s.end());
	free();
	elements = data.first;
	first_free = cap=data.second;
	return *this;
}
void Strvec::reallocate()
{
	auto newcapacity = size() ? 2 * size() : 1;
	auto newdata = alloc.allocate(newcapacity);
	auto dest = newdata;
	auto ele = elements;
	for (size_t i = 0; i != size(); i++)
		alloc.construct(dest++, move(*ele++));
	free();
	elements = newdata;
	first_free = dest;
	cap = newdata + newcapacity;
}
void Strvec::resize(size_t n)
{
	auto newdata = alloc.allocate(n);
	if (n < size())
	{
		for (auto ele = elements + n; ele != first_free; ++ele)
		{
			alloc.destroy(ele);
		}
		elements = newdata;
		first_free = cap = newdata + n;
	}
	else
	{
		elements = newdata;
		first_free = newdata + size();
		cap = newdata + n;
	}
}
void Strvec::reserve(size_t n)
{
	alloc.allocate(n);
}
