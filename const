1）const对象一旦创建后其值就不能再改变，所以const对象必须初始化
2）主要的限制就是只能在const类型的对象上执行不改变其内容的操作。例如，const int 和 int一样都能参与算术运算，也都能转化一个布尔值，等等。
3）在不改变const对象的操作中还有一种是初始化，如果利用一个对象去初始化另外一个对象，则它们是不是const都无关紧要
int i=42;
const int ci=i;
int j=ci;
4)如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字。
也就是说，只在一个文件中定义const，而在其他多个文件中声明并使用它。
extern const int bufsize=fcn();//定义并初始化一个常量，该常量能被其他文件访问
extern const int bufsize;//其他文件中声明

5）【const的引用————常量引用】
const int ci=1024;
const int &r1=ci;
r1=42;//错误：r1是对常量的引用
int &r2=ci;//错误：试图让一个非常量引用指向一个常量引用

引用的类型必须与其引用对象的类型一致，但是有两个例外。
第一个例外情况：在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。
尤其，允许为一个常量引用绑定 非常量的对象、字面值，甚至是个一般表达式：
int i=42;
const int &r1=i;//对象
const int &r2=42;//字面值
const int &r3=r1*2;//一般表达式
int &r4=r1*2;//错误：r4是一个普通的非常量引用

对const的引用可能引用一个并非const的对象
常量引用仅对【引用】可参与的操作做出了限定，对于【引用的对象本身】是不是一个常量未作限定。
int i=42;
int &r1=i;
const int &r2=i;
r1=0;
r2=0;//错误：r2是一个常量引用

6）【指针和const】
【指向常量的指针】不能用于改变其所指对象的值。要想存放【常量对象】的地址，只能使用【指向常量的指针】：
const double pi=3.14;
double *ptr=&pi;//错误：ptr是一个普通指针
const double *cptr=&pi;
*cptr=42;//不能给*cptr赋值

指针的类型必须与其所指对象的类型一致，但是有两个例外。
第一种例外情况：允许令一个【指向常量的指针】指向一个【非常量对象】：
double dval=3.14;
const double *cptr=&dval;
所谓【指向常量的指针】仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变。

【const】指针
【常量指针】必须初始化，而且一旦初始化完成，则它的值就不能再改变了
int errNumb=0;
int *const curErr=&errNumb;//curErr将一直指向errNumb
const double pi=3.14;
const double *const pip=&pi;//pip是一个【指向常量对象的常量指针】

【顶层const】
【顶层const】表示指针本身是个常量
【底层const】表示指针所指的对象是一个常量
更一般的，【顶层const】可以表示任意对象是常量，这一点对任何数据类型都适用，如算术类型、类、指针等。
【底层const】则与指针和引用等复合类型的基本类型部分有关。
比较特殊的是，指针类型既可以是顶层const也可以是底层const：
int i=0;
int *const p1=&i;//不能改变p1的值，顶层const
const int ci=42;//不能改变ci的值，底层const
const int *p2=&ci;//允许改变p2的值，底层const
const int *const p3=p2;//const 是底层const， *const是顶层const
const int &r=ci;//用于声明引用的const都是底层const


7）【const形参和实参】
void fcn(const int i);//当形参有【顶层const】时，传给它常量对象或者非常量对象都是可以的
我们可以用【非常量】初始化一个【底层const对象】，但是反过来不行；
同时一个【普通的引用】必须用同类型的对象初始化。

【尽量使用常量引用】
使用【普通引用】会限制函数所能接受的实参类型。我们不能把const对象，字面值或者需要类型转换的对象传递给普通的引用形参。
允许为一个【常量引用】传递非常量对象，字面值，甚至是一个表达式。




8）【从const成员函数返回*this】

一个const成员函数如果以引用的形式返回*this,那么它的返回类型将是常量引用。
class screen
{
public:
	screen &display(ostream &os) { do_display(os); return *this; }
	const screen &display(ostream &os)const { do_display(os); return *this; }//基于const的重载
private:
	void do_display(ostream &os)const { os << contents << endl; }
	string contents;
};

当一个成员调用另一个成员时，this指针在其中隐式地传递。
因此，当display调用do_display时，它的this指针隐式地传递给do_display.
而当dispaly的非常量版本调用do_display时，它的this指针将隐式地从【指向非常量的指针】转换成【指向常量的指针】。
当do_display完成后，display函数各自返回【解引用this（*this）】所得的对象。
在非常量版本中，this指向一个【非常量对象】。因此display返回一个普通的引用；
而const成员则返回一个常量引用。























