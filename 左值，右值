当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。

几种我们熟悉的运算符是用到【左值】的：
1）赋值运算符需要一个（非常量）左值作为其左侧运算对象，得到的结果也仍然是一个左值。 int i=9;
2)取地址符(&)作用于一个左值运算对象，返回一个指向该运算对象的指针，这个指针是一个右值。int *p= &i;
3)内置解引用运算符（*:int *p=&val）、下标运算符、迭代器解引用运算符、string和vector的下标运算符的求值结果都是左值。
4）内置类型和迭代器的递增递减运算符作用于左值运算对象，其前置版本所得的结果也是左值。

内置类型:
整型：
①整数 int、short和long
②字符型 char和wchar_t(扩展字符集，比如汉字和日语)
③布尔型 bool
整型可用修饰：unsigned
浮点：
float、double和long double


【右值】是由两个概念构成的，一个是将亡值（xvalue，eXpiring Value），另一个则是纯右值（prvalue，Pure Rvalue）。

纯右值】：比如非引用返回的函数返回的临时变量值就是一个纯右值。
         一些运算表达式，比如1 + 3产生的临时变量值，也是纯右值。
         而不跟对象关联的字面量值，比如：2、‘c’、true，也是纯右值。
         此外，类型转换函数的返回值、lambda表达式（见7.3节）等，也都是右值。

将亡值】：比如返回右值引用T&&的函数返回值、
        std::move的返回值，
        或者转换为T&&的类型转换函数的返回值 
